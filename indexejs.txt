<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <head>
      <meta charset="UTF-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Responsive Task Dashboard</title>
      <link rel="stylesheet"
        type="text/css"
        href="/css/style.css">
      <link rel="stylesheet"
          href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" /> -->
  </head>
  </head>
  <body>

      <form class='' action="http://localhost:3000/search"  method="post">
      <b>Search Through Email-id</b><br>
        <input type="email" id="emailIs" required="True" name="emailIs"><br>
      <button type="submit" required="True" value="submit" name="submit">Submit</button>
      <br>
    </form>


      <br>
      <br>
      <!-- <b>Sign-up/Update</b><br>
      <form class="" action="http://localhost:3000/" method="post">
        User Name:<br>
        <input type="text" id="userName" required="True" name="userName"><br>
        Email ID:<br>
        <input type="email" id="emailId" required="True" name="emailId"><br>
        Phone No:<br>
        <input type="tel" id="phoneNo" required="True" name="phoneNo"><br>
        Password:<br>
        <input type="password" id="password" required="True" name="password"><br>
        <br>
        <button type="submit" required="True" value="submit" name="submit">Submit</button>

    </form> -->
    <h1><%= variable[1].Tables_in_db_intern %></h1> 
    <br>
      <br>
      <b>Add Task List</b><br>
    <form class="" action="http://localhost:3000/" method="post">
        <div id="add-task-list">
            <input type="text" placeholder="Enter task List" required="True" name= "taskList" id = "taskList">
            <button type="submit" required="True" value="submit" name="submit">Submit</button>
        </div>
    </form>

    <ul name="tableContent" id="tableContent"></ul>
    
    <!-- <script>
      fetch('/tables')
        .then(response => response.json())
        .then(data => {
          const tableList = document.getElementById('tableContent');
          data.tables.forEach(table => {
            const li = document.createElement('li');
            li.textContent = table;
            tableList.appendChild(li);
          });
        })
        .catch(error => console.error('Error fetching tables:', error));
    </script> -->

    
    <!-- <br>
    <button type ="button" onclick="display()" value="display" name="display">Display Task Lists to choose from</button>
    <p name="showit" id="showit"></p>
    <script>
        function display()
        {
          document.getElementById("showit").innerHTML = message;
        }
    </script> -->
    
    <b>Add Task</b><br>
    <form class="" action="http://localhost:3000/" method="post">
        <div id="add-task-list">
            <input type="text" placeholder="Enter task List" required="True" name= "taskList" id = "taskList">
            <button type="submit" required="True" value="submit" name="submit">Submit</button>
        </div>
    </form>
    <main>
      <div class="container">
        <div class="myTasks">
          <!-- tasksHead start -->
          <div class="tasksHead">
              <h2>My Tasks</h2>
              <div class="tasksDots">
                  <span class="material-symbols-outlined">
                      more_horiz
                  </span>
              </div>
          </div>
          <!-- tasksHead end -->
          <!-- tasks start -->

          <div class="tasks">
              <ul>
              
                
                  
                </li>
                <span class="tasksIconName">
                  <span class="tasksIcon done">
                      <span class="material-symbols-outlined">
                          check
                      </span>
                  </span>
                  
                  <span class="tasksName">
                    <p id="tasksName"></p>
                    <% for (let j=0; j < variable.length; j++) { %>
                      <%= variable[j].Tables_in_db_intern %>
                      <button type="button" id="button_<%= variable[j].Tables_in_db_intern %>" onclick="buttonClick('<%= variable[j].Tables_in_db_intern %>')">Button <%= variable[j].Tables_in_db_intern %></button>
                      <p id="show_<%= variable[j].Tables_in_db_intern %>"></p>
                  <% } %>
                  
                  <script>
                      function buttonClick(id) {
                          alert("Button " + id + " Clicked!");
                      }
                  </script>
                  
                  </span>
                  
                  
                      
              </span>
              <span class="tasksStar full">
                  <span class="material-symbols-outlined">
                      star
                  </span>
              </span>
            </li>
                  <li>
                      <span class="tasksIconName">
                          <span class="tasksIcon done">
                              <span class="material-symbols-outlined">
                                  check
                              </span>
                          </span>
                          
                          <span class="tasksName">
                              My Task 1
                          </span>
                      </span>
                      <span class="tasksStar full">
                          <span class="material-symbols-outlined">
                              star
                          </span>
                      </span>
                  </li>
                  <li>
                      <span class="tasksIconName">
                          <span class="tasksIcon notDone"></span>
                          <span class="tasksName">
                              My Task 2
                          </span>
                      </span>
                      <span class="tasksStar half">
                          <span class="material-symbols-outlined">
                              star
                          </span>
                      </span>
                  </li>
                  <li>
                      <span class="tasksIconName">
                          <span class="tasksIcon notDone"></span>
                          <span class="tasksName">
                              My Task 3
                          </span>
                      </span>
                      <span class="tasksStar half">
                          <span class="material-symbols-outlined">
                              star
                          </span>
                      </span>
                  </li>
                  <li>
                      <span class="tasksIconName">
                          <span class="tasksIcon done">
                              <span class="material-symbols-outlined">
                                  check
                              </span>
                          </span>
                          <span class="tasksName tasksLine">
                              <underline>My Task 4</underline>
                          </span>
                      </span>
                      <span class="tasksStar half">
                          <span class="material-symbols-outlined">
                              star
                          </span>
                      </span>
                  </li>
                  <li>
                      <span class="tasksIconName">
                          <span class="tasksIcon done">
                              <span class="material-symbols-outlined">
                                  check
                              </span>
                          </span>
                          <span class="tasksName tasksLine">
                              My Task 5
                          </span>
                      </span>
                      <span class="tasksStar full">
                          <span class="material-symbols-outlined">
                              star
                          </span>
                      </span>
                  </li>
                  <li>
                      <span class="tasksIconName">
                          <span class="tasksIcon notDone"></span>
                          <span class="tasksName">
                              My Task 6
                          </span>
                      </span>
                      <span class="tasksStar full">
                          <span class="material-symbols-outlined">
                              star
                          </span>
                      </span>
                  </li>
                  <li>
                      <span class="tasksIconName">
                          <span class="tasksIcon notDone"></span>
                          <span class="tasksName">
                              My Task 7
                          </span>
                      </span>
                      <span class="tasksStar half">
                          <span class="material-symbols-outlined">
                              star
                          </span>
                      </span>
                  </li>
              </ul>
          </div>
          <!-- tasks ens -->
      </div>
      </div>
    </main>
    

  </body>
</html>



var express = require("express");
var app     = express();
var path    = require("path");
var mysql = require('mysql2');
var bodyParser = require('body-parser');
var ejs = require ('ejs');
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
var con = mysql.createConnection({
     host : "localhost",
     user : "root",
     password : "root",
     database : "db_intern"
});
var listOfTasks =[];
// app.get('/',function(req,res){
//   res.sendFile(path.join(__dirname+'/index.html'));
// });
// app.post('/',function(req,res){

//   var userName=req.body.userName;
//   var emailId=req.body.emailId;
//   var phoneNo=req.body.phoneNo;
//   var password=req.body.password;
// var moment = require('moment');
// var dateTime = moment(Date.now()).format('YYYY-MM-DD HH:mm:ss');
//   res.write('You sent the name "' + req.body.userName+'".\n');
//   res.write('You sent the email "' + req.body.emailId+'".\n');
//   res.write('You sent the password "' + req.body.password+'".\n');

//   con.connect(function(err) {
//   if (err) throw err;
//   var sql = "INSERT INTO userData (userName, emailId,phoneNo,password,dateTime) VALUES ('"+userName+"', '"+emailId+"','"+phoneNo+"', '"+password+"','"+dateTime+"')";
//   con.query(sql, function (err, result) {
//     if(err){  //we make sure theres an error (error obj)

//           if(err.errno==1062){

//   var sql = 'UPDATE userData SET userName ="' + req.body.userName+'",phoneNo="'+ req.body.phoneNo+'",password="' + req.body.password+'" WHERE emailId ="'+ req.body.emailId+'"';
//   con.query(sql, function (err, result) {
//   if (err) throw err;
//   console.log(result.affectedRows + " record(s) updated");
//   });
//           res.end();

//       }
//           else{
//               throw err;
//           res.end();
//         }
//   }
//     console.log("1 record inserted");
//      res.end();
//   });
//   });
// });
// app.post('/search',function(req,res){
//     var emailId=req.body.emailIs;
//     console.log(emailId);
//       res.write('You sent the email "' + req.body.emailIs+'".\n');
//       con.connect(function(err) {
// if (err) throw err;
// con.query('SELECT * FROM userData WHERE emailId ="'+ req.body.emailIs+'"', function (err, result) {
// if (err) throw err;
// console.log(result);
// });
// });
// });

app.use(express.static(path.join(__dirname, 'public')));

// Set 'views' directory for any views 
// being rendered res.render()
app.set('views', path.join(__dirname, 'views'));

// Set view engine as EJS
app.engine('html', require('ejs').renderFile);
app.set('view engine', 'html');
app.set('views', path.join(__dirname, 'views'));
 
app.set('view engine', 'ejs'); 
app.set('views', __dirname + '/views'); 
app.use(express.static('public'));
  
app.get('/', (req, res) => { 
  const variableToSend = 'Hello from Node.js!'; 
  var sql = "Show tables";
    con.query(sql, function (err, result) {
    if (err) throw err;
    else
    {
      res.render('index', { variable: result});
    }
    });
   
});   

app.post('/',function(req,res){

    
    var taskList=req.body.taskList;
    listOfTasks.push(taskList);
    
  var moment = require('moment');
  var dateTime = moment(Date.now()).format('YYYY-MM-DD HH:mm:ss');
    res.write('You made task list "' + req.body.taskList+'".\n');
  
    con.connect(function(err) 
    {
    
    var sql = "Create Table "+taskList+" (task_id int primary key not null auto_increment, tasks varchar(300), listname varchar(50))";
    con.query(sql, function (err, result) {
    if (err) throw err;
    console.log(result.affectedRows + " record(s) updated");
    });

    var sql = "Show tables";
    con.query(sql, function (err, result) {
    if (err) throw err;
    console.log(result[0].Tables_in_db_intern);
    });

})});



con.query('use db_intern', function(err, results){
  // Release the connection back to the pool
  

  if (err) throw err;
  else
  {
    console.log("connected");
  }
})
// con.query('show tables', function(err, results){
//   // Release the connection back to the pool
  

//   if (err) throw err;
//   else
//   {
//     console.log(results);
//   }
// })


app.get('/', function (req, res, next) {

  con.query('show tables', function(err, results){
    // Release the connection back to the pool
    

    if (err) throw err;
    else
    {
      console.log(results);
      res.render('index', { data: results});
    }
  })
    // Render the HTML page with the fetched data
    
});
// module.exports = app;

// var tableContent = document.getElementById("tableContent"); 
// tableContent.innerHTML = "";
//   var sql = "SHOW TABLES  " ;

//   con.query(sql, function (err, result, fields) {
//     if (err) throw err;
    


//      var i;
//     for (i = 0; i < result.length; i++) {
    
//     var num =result[i];


// }

// });




// app.get("/", function(request, response, next){

// 	var query = "show tables";

// 	database.query(query, function(error){

// 		if(error)
// 		{
// 			throw error; 
// 		}

// 	});

// });
// db1.post("/send", function(req, res)
// {
//     var newID = req.body.name;
//     res.redirect("/action")
//     alert("reciebed");
// // });

// app.get('/tables', function(req, res){
//   con.connect(function(err) {
//     if (err) throw err;
  
//   connection.query("SHOW TABLES", (error, results, fields) => {
//     if (error) {
//       console.error('Error fetching tables: ' + error.stack);
//       res.status(500).json({ error: 'Error fetching tables' });
//       return;
//     }
//     const tables = results.map((row) => row[Object.keys(row)[0]]);
//     res.json({ tables });
//   });
// });
// });


const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});
